/*Class: PlayListLoader- loads XML playlist and parses object via dispatchEvent.Author: Newtriks (simon@newtriks.com)Date: 18 April 2007*/// Importsimport mx.events.EventDispatcher;import mx.utils.Delegate;import PlayListObject;// Define classclass PlayListLoader {		// Variables	private var playlist_xml:XML;	private var itemNode:XMLNode;	private var item_obj:PlayListObject;	private var items_array:Array;		public var dispatchEvent:Function;	public var addEventListener:Function;	public var removeEventListener:Function;		// Constructor		function PlayListLoader (targetXmlStr:String)	{		// Assign this class as the event dispatcher		EventDispatcher.initialize(this);		// Local ref to current class		var thisObj:PlayListLoader = this;		// Local var to load xml file		var pl_xml:XML = new XML();		pl_xml.ignoreWhite = true;		pl_xml.onLoad = function (success:Boolean) 		{			if(success) 			{				/* If XML loads and parses, set this class				   playlist_xml var to the parsed XML doc				   and call init(); */				   thisObj.playlist_xml = this;				   thisObj.init();			} else {				trace ("ERROR LOADING THE XML");			}		};		// Begin loading the XML doc		pl_xml.load(targetXmlStr);	}		private function init():Void	{		this.buildPlayList();	}		private function buildPlayList():Void	{		// Array to store all the items		items_array = new Array();		// Loop through XML and create a new object for each item		for ( var i=0; i < this.playlist_xml.firstChild.childNodes.length; i++)		{			// Target the item node			itemNode = this.playlist_xml.firstChild.childNodes[i];			// Class obj to hold all the properties of the item node			item_obj = new PlayListObject();			// Assign the filename property			item_obj.filename = itemNode.attributes.filename;			// Assign the desc property			item_obj.desc = itemNode.attributes.desc;			// Assign the genre property			item_obj.genre = itemNode.attributes.genre;			// Assign the myrating property			item_obj.myrating = itemNode.attributes.myrating;			// Push the item_obj to the item array			items_array.push(item_obj);		}		displayPlayList();	}		private function displayPlayList():Void	{		// Dispatch all the playlist data to our listening PlayList class		dispatchEvent({target:this, type:"complete", items:items_array});	}		}