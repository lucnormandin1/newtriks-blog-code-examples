/*Nutrix - RemoteCaller class- Class to initiate the RemotingAccess class, then expect a rs  of the data via a dispatchEvent....	Author: NewtriksDate: 07 May 2007*/// Importsimport mx.events.EventDispatcher;import mx.remoting.RecordSet;import mx.utils.Delegate;import RemotingAccess;// Define classclass RemoteCaller extends MovieClip{		//Declare Variables	private static var remote_data:RemotingAccess;	private var initialized:Boolean;	private var _remote_mc:MovieClip;	private var display_mc:MovieClip;		public var addEventListener:Function;	public var removeEventListener:Function;		// Constructor		public function RemoteCaller() 	{				// Call methods from MovieClip		super();				// Not yet set up visual interface		initialized = false;				// Initialize the eventDispatcher		EventDispatcher.initialize (this);				this.init();			}		private function init():Void	{				if( !initialized ) 		{			// Build visual interface			// Create an empty MovieClip object with the instance name '_remote_mc'			this._remote_mc = this.createEmptyMovieClip("_remote_mc", this.getNextHighestDepth());				// Attach an instance of 'display_mc'			display_mc = this._remote_mc.attachMovie			("display_mc", "display_mc", this._remote_mc.getNextHighestDepth());				// Position the display MovieClip in centre of stage			display_mc._x = (Stage.width/2)-91;			display_mc._y = (Stage.height/2)-91;			// Display content is loading in status text field			display_mc.status_txt.text = "Calling Service... ";						// All set up, set initialized to true			initialized = true;						// 			callRemote();					}	}		private function callRemote():Void	{				// Create a new instance of the ChapterListLoader class and load xml		remote_data = new RemotingAccess("http://localhost:8101/cfusion/flashservices/gateway","flashmac_remoting.remoteMac_data");				// Add event listener for out for the dispatching of the rs data		remote_data.addEventListener("responseResult", Delegate.create(this, resultHandler));				// Add event listener for out for the dispatching of the fault data		remote_data.addEventListener("faultResult", Delegate.create(this, faultHandler));			}		private function resultHandler(eventObject:Object):Void	{				// Clear status text field		display_mc.status_txt.text = "";				trace(eventObject.rs_data);				var cnames = eventObject.rs_data.getColumnNames();				for( var i=0; i<eventObject.rs_data.items.length; i++) 		{			// Loop thru records and assign each one to a record variable			var record = eventObject.rs_data.getItemAt(i); 						/* We only have one value and so we can display the single			 * values in text fields.  To display more values i.e. more			 * than one user, use one of the following components e.g.			 * DataGrid, ListBox, TextArea ...			 */						// Column 0 is id			// Column 1 is username			// Column 2 is password			display_mc.username_txt.text = record[cnames[1]];			display_mc.password_txt.text = record[cnames[2]];					}	}		private function faultHandler(eventObject:Object):Void	{				display_mc.status_txt.text = '';		display_mc.status_txt.text =  "Problem with call: " ;		display_mc.status_txt.text = "Error returned: " + eventObject.fault_data.fault.faultstring;			}	}