/*Nutrix - RemotingAccess class- Class to connect to database using flash remoting ....	Author: NewtriksDate: 02 May 2007*/// Importsimport mx.events.EventDispatcher;import mx.remoting.debug.NetDebug;import mx.remoting.PendingCall;import mx.remoting.Service;import mx.rpc.RelayResponder;import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import mx.remoting.RecordSet;import mx.utils.Delegate;// Define classclass RemotingAccess{		//Declare Variables		// Flash services gateway url	private static var GATEWAYURL:String;	// Path to cfc	private static var CFCURL:String;			private var inst:Service;	public var dispatchEvent:Function;	public var addEventListener:Function;	public var removeEventListener:Function;	// Constructor		public function RemotingAccess(url_gateway:String, url_cfc:String) 	{				// Assign url's to class variables		GATEWAYURL = url_gateway;		CFCURL = url_cfc;		// Initialize the eventDispatcher		EventDispatcher.initialize (this);				// Call the init() method		this.init();			}		// initializes the display	private function init():Void 	{		loadRemoteData();	}		private function getInstance():Service		{								// Initialize the NetDebug, comment out when not testing!			//NetDebug.initialize();									// Return reference to singleton instance			if ( inst == null )			{				// create a single instance of the singleton				inst = new Service ( GATEWAYURL, null, CFCURL, null, null);			}						return inst;		}		private function loadRemoteData():Void 	{				// Create new instance of the remoting service		var service = getInstance();				var pc:PendingCall = service.db_access();		pc.responder = new RelayResponder( this, "respond_Result", "respond_Fault" );			}	private function respond_Result( re:ResultEvent ):Void 	{		// We now have a recordset of data from the database.		var rs:RecordSet = RecordSet(re.result);		// Dispatch event if anyone wants the data		dispatchEvent ({ type:"responseResult", target:this, rs_data:rs });			}	private function respond_Fault( fault:FaultEvent ):Void 	{				// Dispatch event if anyone wants the data		dispatchEvent ({ type:"faultResult", target:this, fault_data:fault });			}	}